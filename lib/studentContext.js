import prisma from './prisma';

const SUBJECT_LABELS = {
  math: '数学',
  science: '理科',
  english: '英語',
  'social-studies': '社会',
  japanese: '国語'
};

function formatGrade(grade) {
  if (!grade) return '学年未設定';
  const gradeNumber = Number(grade);
  if (Number.isNaN(gradeNumber) || gradeNumber < 1 || gradeNumber > 3) {
    return '学年未設定';
  }
  return `中学${gradeNumber}年生`;
}

function formatSubject(subject) {
  if (!subject || !SUBJECT_LABELS[subject]) return '未設定';
  return SUBJECT_LABELS[subject];
}

function formatMockScore(score) {
  if (typeof score !== 'number' || Number.isNaN(score)) {
    return '未入力';
  }
  return `${score}/100`;
}

export function buildPersonalizedContextDocument(student) {
  const gradeLabel = formatGrade(student?.grade);
  const subjectLabel = formatSubject(student?.favoriteSubject);
  const mockScoreLabel = formatMockScore(student?.mockExamScore);

  const guidanceLines = [
    `- ${gradeLabel} に合わせて、段階的で理解しやすい説明を提供する。`,
    `- 例や比喩を使いながら、${subjectLabel} への興味を活かして他教科の内容ともつなげる。`,
    '- 自信を育てる声かけと、確認質問で理解度を確かめながら進める。'
  ];

  return [
    'Student Profile',
    `- Grade: ${gradeLabel}`,
    `- Favorite Subject: ${subjectLabel}`,
    `- Mock Exam Score: ${mockScoreLabel}`,
    '',
    'Guidance',
    ...guidanceLines
  ].join('\n');
}

export async function ensureStudentContextDocument(student, { forceRegenerate = false } = {}) {
  if (!student?.email) {
    return null;
  }

  if (!student.grade || !student.favoriteSubject) {
    const existingDoc =
      student.contextDocument || (await prisma.studentContextDocument.findUnique({
        where: { studentEmail: student.email }
      }));
    return existingDoc?.content || null;
  }

  const content = buildPersonalizedContextDocument(student);

  let contextDocument =
    student.contextDocument || (await prisma.studentContextDocument.findUnique({
      where: { studentEmail: student.email }
    }));

  if (!contextDocument) {
    contextDocument = await prisma.studentContextDocument.create({
      data: {
        studentEmail: student.email,
        content,
        isAutoGenerated: true
      }
    });
    return contextDocument.content;
  }

  if (!forceRegenerate && contextDocument && contextDocument.isAutoGenerated === false) {
    return contextDocument.content;
  }

  contextDocument = await prisma.studentContextDocument.update({
    where: { studentEmail: student.email },
    data: {
      content,
      isAutoGenerated: true
    }
  });

  return contextDocument.content;
}

export { SUBJECT_LABELS };
