'use server';

import { cookies } from 'next/headers';
import prisma from '../../lib/prisma';
import { ensureStudentContextDocument } from '../../lib/studentContext';

function getSessionEmail() {
  const sessionCookie = cookies().get('withstady-session');
  if (!sessionCookie?.value) return null;

  try {
    const parsed = JSON.parse(sessionCookie.value);
    if (typeof parsed?.email === 'string' && parsed.email.trim()) {
      return parsed.email.trim().toLowerCase();
    }
  } catch (error) {
    return null;
  }

  return null;
}

export async function loadContextDocument() {
  const email = getSessionEmail();
  if (!email) {
    throw new Error('ログインが必要です。');
  }

  const student = await prisma.student.findUnique({
    where: { email },
    include: { contextDocument: true }
  });

  if (!student) {
    throw new Error('ログインが必要です。');
  }

  const content = await ensureStudentContextDocument(student);

  return {
    content: content || '',
    student
  };
}

export async function saveContextDocumentAction(prevState, formData) {
  const email = getSessionEmail();

  if (!email) {
    return { error: 'ログインが必要です。' };
  }

  const rawContent = formData.get('content');
  const content = typeof rawContent === 'string' ? rawContent : '';

  await prisma.studentContextDocument.upsert({
    where: { studentEmail: email },
    create: {
      studentEmail: email,
      content,
      isAutoGenerated: false
    },
    update: {
      content,
      isAutoGenerated: false
    }
  });

  return { success: 'パーソナライズドドキュメントを保存しました。' };
}

export async function regenerateContextDocumentAction() {
  const email = getSessionEmail();

  if (!email) {
    return { error: 'ログインが必要です。' };
  }

  const student = await prisma.student.findUnique({
    where: { email },
    include: { contextDocument: true }
  });

  if (!student) {
    return { error: '学習者情報が見つかりません。' };
  }

  const content = await ensureStudentContextDocument(student, { forceRegenerate: true });

  return { success: '最新のプロフィール情報から再生成しました。', content };
}
